import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

import '../../../models/call.dart';
import '../../../services/call_service.dart';
import '../../../utils/constants.dart';
import '../../../utils/dialogs.dart';
import '../../widgets/app_drawer.dart';
import '../../widgets/call_item.dart';

class CallListScreen extends StatefulWidget {
  static const routeName = '/calls';

  const CallListScreen({Key? key}) : super(key: key);

  @override
  _CallListScreenState createState() => _CallListScreenState();
}

class _CallListScreenState extends State<CallListScreen> {
  final dateFormat = DateFormat('dd.MM.yyyy');
  DateTime _selectedDate = DateTime.now();
  String _searchQuery = '';
  bool _isLoading = false;
  List<Call> _calls = [];

  @override
  void initState() {
    super.initState();
    _loadCalls();
  }

  Future<void> _loadCalls() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final formattedDate = dateFormat.format(_selectedDate);
      final callService = CallService();
      final calls = await callService.fetchCallsByDate(formattedDate);

      setState(() {
        _calls = calls;
        _isLoading = false;
      });
    } catch (error) {
      setState(() {
        _isLoading = false;
      });
      showErrorDialog(
          context,
          'Не удалось загрузить данные. Пожалуйста, проверьте подключение к интернету.'
      );
    }
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime(2020),
      lastDate: DateTime.now().add(Duration(days: 1)),
      builder: (context, child) {
        return Theme(
          data: ThemeData.light().copyWith(
            colorScheme: ColorScheme.light(
              primary: AppColors.primary,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black,
            ),
          ),
          child: child!,
        );
      },
    );

    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked;
      });
      _loadCalls();
    }
  }

  List<Call> _filterCalls() {
    if (_searchQuery.isEmpty) {
      return _calls;
    }

    final query = _searchQuery.toLowerCase();
    return _calls.where((call) {
      return call.patientName.toLowerCase().contains(query) ||
          call.address.toLowerCase().contains(query) ||
          call.callReason.toLowerCase().contains(query) ||
          call.callType.toLowerCase().contains(query);
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    final filteredCalls = _filterCalls();

    return Scaffold(
      appBar: AppBar(
        title: Text('Журнал вызовов'),
        actions: [
          IconButton(
            icon: Icon(Icons.search),
            onPressed: () async {
              final result = await showSearch(
                context: context,
                delegate: CallSearchDelegate(_calls),
              );
              if (result != null) {
                setState(() {
                  _searchQuery = result;
                });
              }
            },
          ),
          IconButton(
            icon: Icon(Icons.calendar_today),
            onPressed: () => _selectDate(context),
          ),
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: _loadCalls,
          ),
        ],
      ),
      drawer: AppDrawer(),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Дата: ${dateFormat.format(_selectedDate)}',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
                OutlinedButton.icon(
                  onPressed: () => _selectDate(context),
                  icon: Icon(Icons.date_range),
                  label: Text('Выбрать дату'),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: AppColors.primary,
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: _isLoading
                ? Center(child: CircularProgressIndicator())
                : filteredCalls.isEmpty
                ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.info_outline,
                    size: 48,
                    color: Colors.grey,
                  ),
                  SizedBox(height: 16),
                  Text(
                    'Нет вызовов за выбранную дату',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[700],
                    ),
                  ),
                ],
              ),
            )
                : ListView.builder(
              padding: EdgeInsets.all(8),
              itemCount: filteredCalls.length,
              itemBuilder: (context, index) {
                final call = filteredCalls[index];
                return CallItem(
                  call: call,
                  onTap: () {
                    Navigator.of(context).pushNamed(
                      '/call-detail',
                      arguments: call.id,
                    ).then((_) => _loadCalls()); // Обновляем данные после возврата
                  },
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {
          // Функционал экспорта отчетов может быть добавлен здесь
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Экспорт отчета'),
              action: SnackBarAction(
                label: 'Отмена',
                onPressed: () {},
              ),
            ),
          );
        },
        label: Text('Отчет'),
        icon: Icon(Icons.download),
        backgroundColor: AppColors.primary,
      ),
    );
  }
}

class CallSearchDelegate extends SearchDelegate<String?> {
  final List<Call> calls;

  CallSearchDelegate(this.calls);

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      IconButton(
        icon: Icon(Icons.clear),
        onPressed: () {
          query = '';
          showSuggestions(context);
        },
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: Icon(Icons.arrow_back),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    // При нажатии на кнопку поиска возвращаем запрос
    return _buildSearchResults(context);
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    return _buildSearchResults(context);
  }

  Widget _buildSearchResults(BuildContext context) {
    final suggestions = query.isEmpty
        ? calls
        : calls.where((call) {
      return call.patientName.toLowerCase().contains(query.toLowerCase()) ||
          call.address.toLowerCase().contains(query.toLowerCase()) ||
          call.callReason.toLowerCase().contains(query.toLowerCase());
    }).toList();

    return ListView.builder(
      itemCount: suggestions.length,
      itemBuilder: (context, index) {
        final call = suggestions[index];
        return ListTile(
          leading: Icon(Icons.medical_services),
          title: Text(call.patientName),
          subtitle: Text(call.address),
          onTap: () {
            close(context, call.patientName);
          },
        );
      },
    );
  }
}