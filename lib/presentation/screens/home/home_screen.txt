import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';

import '../../../models/brigade_status.dart';
import '../../../models/call.dart';
import '../../../services/call_service.dart';
import '../../../services/brigade_service.dart';
import '../../../services/auth_service.dart';
import '../../../utils/dialogs.dart';
import '../../../utils/constants.dart';
import '../../widgets/status_button.dart';
import '../../widgets/call_item.dart';
import '../../widgets/app_drawer.dart';

class HomeScreen extends StatefulWidget {
  static const routeName = '/home';

  const HomeScreen({Key? key}) : super(key: key);

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  bool _isLoading = false;
  List<Call> _activeCalls = [];
  List<Call> _pendingCalls = [];
  List<Call> _completedCalls = [];
  BrigadeStatus _brigadeStatus = BrigadeStatus.unknown;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _loadData();
  }

  Future<void> _loadData() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // Получаем статус бригады
      final status = await BrigadeService().fetchBrigadeStatus();

      // Получаем списки вызовов
      final callService = CallService();
      final activeCalls = await callService.fetchActiveCalls();
      final pendingCalls = await callService.fetchPendingCalls();
      final completedCalls = await callService.fetchCompletedCalls();

      setState(() {
        _brigadeStatus = status;
        _activeCalls = activeCalls;
        _pendingCalls = pendingCalls;
        _completedCalls = completedCalls;
        _isLoading = false;
      });
    } catch (error) {
      setState(() {
        _isLoading = false;
      });
      showDialog(
        context: context,
        builder: (ctx) => AlertDialog(
          title: Text('Ошибка'),
          content: Text(
              'Не удалось загрузить данные. Пожалуйста, проверьте подключение к интернету.'
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(ctx).pop(),
              child: Text('ОК'),
            ),
          ],
        ),
      );
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context);
    final dateFormat = DateFormat('dd.MM.yyyy');
    final today = dateFormat.format(DateTime.now());

    return Scaffold(
      appBar: AppBar(
        title: Text('АИС «Скорая помощь»'),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: _loadData,
          ),
        ],
        bottom: PreferredSize(
          preferredSize: Size.fromHeight(130),
          child: Column(
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Смена: $today',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      'Пользователь: ${authService.currentUser?.fullName ?? ""}',
                      style: TextStyle(
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: 8),
              _buildBrigadeStatusSelector(),
              TabBar(
                controller: _tabController,
                tabs: [
                  Tab(text: 'Активные'),
                  Tab(text: 'На проверку'),
                  Tab(text: 'Архив'),
                ],
              ),
            ],
          ),
        ),
      ),
      drawer: AppDrawer(),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : TabBarView(
        controller: _tabController,
        children: [
          _buildActiveCallsTab(),
          _buildPendingCallsTab(),
          _buildCompletedCallsTab(),
        ],
      ),
    );
  }

  Widget _buildBrigadeStatusSelector() {
    return Container(
      height: 50,
      child: ListView(
        scrollDirection: Axis.horizontal,
        padding: EdgeInsets.symmetric(horizontal: 8),
        children: [
          StatusButton(
            title: 'Свободен',
            isSelected: _brigadeStatus == BrigadeStatus.available,
            color: AppColors.statusAvailable,
            onPressed: () => _updateBrigadeStatus(BrigadeStatus.available),
          ),
          StatusButton(
            title: 'Выехали',
            isSelected: _brigadeStatus == BrigadeStatus.enRoute,
            color: AppColors.statusEnRoute,
            onPressed: () => _updateBrigadeStatus(BrigadeStatus.enRoute),
          ),
          StatusButton(
            title: 'Прибыли',
            isSelected: _brigadeStatus == BrigadeStatus.arrived,
            color: AppColors.statusArrived,
            onPressed: () => _updateBrigadeStatus(BrigadeStatus.arrived),
          ),
          StatusButton(
            title: 'Завершено',
            isSelected: _brigadeStatus == BrigadeStatus.completed,
            color: AppColors.statusCompleted,
            onPressed: () => _updateBrigadeStatus(BrigadeStatus.completed),
          ),
          StatusButton(
            title: 'На проверку СВ',
            isSelected: _brigadeStatus == BrigadeStatus.pendingReview,
            color: AppColors.statusPendingReview,
            onPressed: () => _updateBrigadeStatus(BrigadeStatus.pendingReview),
          ),
        ],
      ),
    );
  }

  Future<void> _updateBrigadeStatus(BrigadeStatus status) async {
    setState(() {
      _isLoading = true;
    });

    try {
      await BrigadeService().updateStatus(status);

      setState(() {
        _brigadeStatus = status;
        _isLoading = false;
      });

      // Show confirmation dialog
      if (status == BrigadeStatus.available) {
        showInfoDialog(
            context,
            'Статус обновлен',
            'Бригада готова принимать вызовы.'
        );
      } else if (status == BrigadeStatus.pendingReview) {
        showInfoDialog(
            context,
            'Карта отправлена на проверку',
            'Заполненная карта вызова отправлена на проверку старшему врачу.'
        );
      }
    } catch (error) {
      setState(() {
        _isLoading = false;
      });
      showErrorDialog(
          context,
          'Не удалось обновить статус бригады.'
      );
    }
  }

  Widget _buildActiveCallsTab() {
    if (_activeCalls.isEmpty) {
      return Center(
        child: Text('Нет активных вызовов'),
      );
    }

    return ListView.builder(
      padding: EdgeInsets.all(8),
      itemCount: _activeCalls.length,
      itemBuilder: (context, index) {
        final call = _activeCalls[index];
        return CallItem(
          call: call,
          onTap: () {
            Navigator.of(context).pushNamed(
              '/call-detail',
              arguments: call.id,
            ).then((_) => _loadData()); // Обновляем данные после возврата
          },
        );
      },
    );
  }

  Widget _buildPendingCallsTab() {
    if (_pendingCalls.isEmpty) {
      return Center(
        child: Text('Нет вызовов на проверке'),
      );
    }

    return ListView.builder(
      padding: EdgeInsets.all(8),
      itemCount: _pendingCalls.length,
      itemBuilder: (context, index) {
        final call = _pendingCalls[index];
        return CallItem(
          call: call,
          onTap: () {
            Navigator.of(context).pushNamed(
              '/call-detail',
              arguments: call.id,
            ).then((_) => _loadData()); // Обновляем данные после возврата
          },
        );
      },
    );
  }

  Widget _buildCompletedCallsTab() {
    if (_completedCalls.isEmpty) {
      return Center(
        child: Text('Нет завершенных вызовов'),
      );
    }

    return ListView.builder(
      padding: EdgeInsets.all(8),
      itemCount: _completedCalls.length,
      itemBuilder: (context, index) {
        final call = _completedCalls[index];
        return CallItem(
          call: call,
          onTap: () {
            Navigator.of(context).pushNamed(
              '/call-detail',
              arguments: call.id,
            ).then((_) => _loadData()); // Обновляем данные после возврата
          },
        );
      },
    );
  }
}